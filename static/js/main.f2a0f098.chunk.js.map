{"version":3,"sources":["videos/MiddleEastMan01.webm","App.js","reportWebVitals.js","index.js"],"names":["App","videoRef","useRef","useState","value","setValue","oldValue","setOldValue","useEffect","duration","current","console","log","i","newTime","parseInt","currentTime","className","ref","width","height","src","video","type","onChange","e","target","min","max","id","name","for","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAAe,G,MAAA,IAA0B,8CCyC1BA,MArCf,WACE,IAAMC,EAAWC,iBAAO,MADX,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGmBF,mBAAS,IAH5B,mBAGNG,EAHM,KAGIC,EAHJ,KA0Bb,OAnBAC,qBAAU,WACR,IAAMC,EAAWR,EAASS,QAAQD,SAElC,GADAE,QAAQC,IAAIR,GACRA,GAASE,EACX,IAAK,IAAIO,EAAIP,EAAUO,EAAIT,EAAOS,IAAK,CACrC,IAAMC,EAAUL,EAAWM,SAASF,GAAK,IACzCF,QAAQC,IAAI,IAAKE,GACjBb,EAASS,QAAQM,YAAcF,OAGjC,IAAK,IAAID,EAAIP,EAAUO,EAAIT,EAAOS,IAAK,CACrC,IAAMC,EAAUL,EAAWM,SAASF,GAAK,IACzCF,QAAQC,IAAI,IAAKE,GACjBb,EAASS,QAAQM,YAAcF,EAGnCP,EAAYH,KACX,CAACA,IAGF,sBAAKa,UAAU,MAAf,UACE,uBAAOC,IAAKjB,EAAUkB,MAAM,MAAMC,OAAO,MAAzC,SACE,wBAAQC,IAAKC,EAAOC,KAAK,iBAE3B,uBAAOnB,MAAOA,EAAOoB,SA1BJ,SAACC,GAAD,OAAOpB,EAASoB,EAAEC,OAAOtB,QA0BGmB,KAAK,QAAQI,IAAI,MAAMC,IAAI,MAAMC,GAAG,QAAQC,KAAK,UAC9F,uBAAOC,IAAI,eCxBFC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f2a0f098.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/MiddleEastMan01.92e46e2e.webm\";","import { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport video from './videos/MiddleEastMan01.webm';\n\nfunction App() {\n  const videoRef = useRef(null);\n  const [value, setValue] = useState(0.1);\n  const [oldValue, setOldValue] = useState(0.1);\n\n  const handleChange = (e) => setValue(e.target.value)\n\n  useEffect(() => {\n    const duration = videoRef.current.duration;\n    console.log(value);\n    if (value >= oldValue) {\n      for (let i = oldValue; i < value; i++) {\n        const newTime = duration * parseInt(i) / 100\n        console.log('1', newTime)\n        videoRef.current.currentTime = newTime;\n      }\n    } else {\n      for (let i = oldValue; i > value; i--) {\n        const newTime = duration * parseInt(i) / 100\n        console.log('2', newTime)\n        videoRef.current.currentTime = newTime;\n      }\n    }\n    setOldValue(value);\n  }, [value])\n\n  return (\n    <div className=\"App\">\n      <video ref={videoRef} width=\"750\" height=\"500\" >\n        <source src={video} type=\"video/webm\" />\n      </video>\n      <input value={value} onChange={handleChange} type=\"range\" min=\"0.1\" max=\"100\" id=\"range\" name=\"range\" />\n      <label for=\"volume\" />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}